# -*- coding: utf-8 -*-
"""CustAndClaim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s5DV8_yYSajBdQbXxQTCev7icyM3LHOi
"""

from google.colab import files
import pandas as pd

cust = files.upload() #google colab에서 사용하는 파일 업로드 방식임. 타 에디터 이용시 아래 주석과 같은 경로 지정 필요
#claim = pd.read_csv("../data/CLAIM.csv", encoding = "UTF-8", sep = ",")

custdf = pd.read_csv('extracted_cust.csv', sep = ',', encoding = 'utf-8', error_bad_lines=False, engine = 'python', header = None, names = ['CUST_ID', 'DIVIDED_SET', 'SIU_CUST_YN', 'TOTALPREM', 'MINCRDT', 'JPBASE_HSHD_INCM'])#각 컬럼별 네이밍

custdf = custdf.drop(custdf.index[0])#첫 row는 컬럼명이 들어간 더미데이터이므로 삭제

custdf.isnull().sum()#결측치 확인

#신용도 미확인 값은 6으로 대체(데이터 정의에 따름)
custdf['MINCRDT'].fillna(value = 6, inplace = True)

custdf.isnull().sum()

#신용도가 10보다 높으면 이상치이므로 행 삭제, 그러나 min값을 뽑아왔으므로 사례 없을 것으로 추정
custdf = custdf[custdf.MINCRDT <= 10]

#Total PREM 1000만단위 라벨링 (ex)176만 -> 0, 1700만 -> 1, 3억 -> 30 ...), 분석시 상관관계 낮게 나오면 범위 더 크게 할 것
custdf.dropna(subset = ['TOTALPREM'], inplace = True)
custdf['TOTALPREM'] = (custdf['TOTALPREM']/10000000).astype(int)

custdf.isnull().sum()#결측치 확인 2

custdf.dropna(subset = ['JPBASE_HSHD_INCM'], inplace = True)#결측치 삭제

#결측치 제거 완료
custdf.isnull().sum()

claim = files.upload()#구글 코랩 파일 업로드 방식

claimdf = pd.read_csv('extracted_claim.csv', sep = ',', encoding = 'utf-8', error_bad_lines=False, engine = 'python', header = None, names = ['CUST_ID', 'RESL_CD1', 'ACCI_OCCP_GRP', 'CAUS_CODE',  'DMND_RESN_CODE', 'VLID_HOSP_OTDA', 'HOSP_CODE', 'HOSP_SPEC_DVSN', 'CHME_LICE_NO', 'DMND_AMT', 'PAYM_AMT', 'NON_PAY_RATIO', 'HEED_HOSP_YN'])#13개 컬럼에 대한 네이밍

claimdf = claimdf.drop(claimdf.index[0])#역시 컬럼명으로 적혀있는 첫번째 row에 대한 삭제

claimdf.isnull().sum()#결측치에 대한 확인

#-------------- 직업별 정수형 라벨링 ---------------------------
# 결측치 포함 행 삭제
#사무직 1
#자영업 2
#주부 3
#교사 4
#예체능계 종사자 5
#운전직 6
#1차산업 종사자 7
#2차산업 종사자 8
#3차산업 종사자 9
#공무원 10
#고위 공무원 11
#단순 노무직 12
#기업/단체 임원 13
#고소득의료직 14
#전문직 15
#종교인/역술인 16
#대학교수/강사 17
#단순 사무직 18
#교육관련직 19
#학자/연구직 20
#학생 21
#법무직 종사자 22
#고소득 전문직 23
#의료직 종사자 24
#기타 25

#직업 추출에 사용된 출력문
#개선된 변수 확인 알고리즘 아이디어 있으신 분은 알려주시길(혹은 액셀 함수라도)
#for i in custDF['OCCP_GRP']: 
  #if i != '의료직 종사자' and i != '고소득 전문직' and i != '사무직' and i != None and i!='자영업' and i!='주부' and i!='교사' and i!='예체능계 종사자' and i!='운전직' and i!='1차산업 종사자' and i!='2차산업 종사자' and i!='3차산업 종사자' and i!='공무원' and i!='고위 공무원' and i!='단순 노무직' and i!='기업/단체 임원' and i!='고소득의료직' and i!='전문직' and i!='종교인/역술인' and i!='대학교수/강사' and i!='단순 사무직' and i!='교육관련직' and i!='학자/연구직' and i!='학생' and i!='법무직 종사자' and i!='기타' :
    #print(i)

#위 주석과 대응하는 정수형 라벨링(이 단계에서는 type casting 아직 안함)
claimdf['ACCI_OCCP_GRP'].replace('사무직', 1, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('자영업', 2, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('주부', 3, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('교사', 4, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('예체능계 종사자', 5, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('운전직', 6, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('1차산업 종사자', 7, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('2차산업 종사자', 8, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('3차산업 종사자', 9, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('공무원', 10, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('고위 공무원', 11, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('단순 노무직', 12, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('기업/단체 임원', 13, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('고소득의료직', 14, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('전문직', 15, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('종교인/역술인', 16, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('대학교수/강사', 17, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('단순 사무직', 18, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('교육관련직', 19, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('학자/연구직', 20, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('학생', 21, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('법무직 종사자', 22, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('고소득 전문직', 23, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('의료직 종사자', 24, inplace = True)

claimdf['ACCI_OCCP_GRP'].replace('기타', 25, inplace = True)

#병명 코드 각 첫번째 철자로 그룹화하기 위해 숫자 잘라낼 것
#정규표현식 이용 숫자 제거
claimdf['CAUS_CODE'] = claimdf['CAUS_CODE'].str.replace('\d+', '')

claimdf.dropna(subset = ['ACCI_OCCP_GRP'], inplace = True)#라벨링 후 직업 코드에 대한 결측치 삭제

claimdf.dropna(inplace = True)#클레임 데이터 내부 모든 결측치 제거

claimdf.isnull().sum()

claimdf['CAUS_CODE_COUNT'] = claimdf.groupby(claimdf['CUST_ID'])["CAUS_CODE"].transform('nunique')#위와 동일

claimdf.drop(['CAUS_CODE'], axis=1, inplace = True)

claimdf['DMND_RESN_CODE_COUNT'] = claimdf.groupby(claimdf['CUST_ID'])["DMND_RESN_CODE"].transform('nunique')#위와 동일

claimdf.drop(['DMND_RESN_CODE'], axis=1, inplace = True)

claimdf['RESL_CD1_COUNT'] = claimdf.groupby(claimdf['CUST_ID'])["RESL_CD1"].transform('nunique')#위와 동일
claimdf.drop(['RESL_CD1'], axis=1, inplace = True)

# 라벨링
claimdf['HEED_HOSP_YN'] = claimdf['HEED_HOSP_YN'].replace(["N"],0)

claimdf['HEED_HOSP_YN'] = claimdf['HEED_HOSP_YN'].replace(["Y"],1)

HEED_HOSP_YN = claimdf.groupby('CUST_ID')['HEED_HOSP_YN'].count()
Y = claimdf.groupby("CUST_ID")["HEED_HOSP_YN"].sum()
HEED_HOSP_YN_rate = Y / HEED_HOSP_YN
HEED_HOSP_YN_rate

claim_DF= pd.DataFrame()
claim_DF["HEED_HOSP_YN_RATE"] = HEED_HOSP_YN_rate

claimdf.dtypes

claimdf["DMND_AMT_SUM"] = claimdf.groupby('CUST_ID')['DMND_AMT'].transform('sum')
claimdf["PAYM_AMT_SUM"] = claimdf.groupby('CUST_ID')['PAYM_AMT'].transform('sum')
claimdf["NON_PAY_RATIO_SUM"] = claimdf.groupby('CUST_ID')['NON_PAY_RATIO'].transform('sum')

claimdf

claimdf.isnull().sum()#결측치 완전 제거 확인

claimdf = claimdf[(claimdf.VLID_HOSP_OTDA).astype(int) < 300]#유효 통원, 입원 일자가 10000이 넘어가는 이상치를 발견함. 유효입원일자가 높은 경우 실제로 아프거나 오류 데이터일 것이라고 생각하고 배제(이상치 제거 코드)

claimdf['CLAIM_CNT'] = claimdf['CUST_ID'].groupby(claimdf['CUST_ID']).transform('count')#group화하여 row수를 세주고, 그에 따른 카운트를 새 컬럼으로 만들어 추가, cust_id는 병합을 위해 남겨놓아야함을 인지

claimdf = claimdf.astype({'VLID_HOSP_OTDA': 'int'})#첫 row가 컬럼명으로 들어갔었기에 오브젝트형 타입으로 선언되어있었음. integer형으로 먼저 바꿔주는 작업 필요

claimdf.dtypes#타입 확인

claimdf['TOTAL_VLID_HOSP_OTDA'] = claimdf.groupby(claimdf['CUST_ID'])['VLID_HOSP_OTDA'].transform('sum')#cust_id 기준 vlid_hosp_otda의 합을 새 컬럼으로 만들고, 기존 컬럼 삭제
claimdf.drop(['VLID_HOSP_OTDA'], axis=1, inplace = True)

claimdf.isnull().sum()

claimdf['HOSP_VARIES'] = claimdf.groupby(claimdf['CUST_ID'])["HOSP_CODE"].transform('nunique')#nunique는 고유값을 세주는 카운트함수임. 즉 중복값을 제외하고 각자 다른 값들의 수를 세어 병원의 가짓수를 세서 컬럼화, 기존 컬럼 삭제
claimdf.drop(['HOSP_CODE'], axis=1, inplace = True)

claimdf['HOSP_DVSN_VARIES'] = claimdf.groupby(claimdf['CUST_ID'])["HOSP_SPEC_DVSN"].transform('nunique')#위와 동일
claimdf.drop(['HOSP_SPEC_DVSN'], axis=1, inplace = True)

claimdf['CHME_LICE_COUNT'] = claimdf.groupby(claimdf['CUST_ID'])["CHME_LICE_NO"].transform('nunique')#위와 동일
claimdf.drop_duplicates(['CUST_ID'], inplace = True)

claimdf

merged_claim_data = pd.merge(custdf, claimdf, how='right')#cust_id를 기준으로 병합될 것임

merged_claim_data.dropna(inplace= True)#병합된 데이터에서 결측치를 제거해줌

merged_claim_data.isnull().sum()#최종 데이터 결측치 확인

#merged_data = merged_claim_data.join(claim_DF, how ='natural')
merged_data = pd.merge(left = merged_claim_data , right = claim_DF, how = "inner", on = "CUST_ID")

merged_data

merged_data.dropna(inplace= True)#병합된 데이터에서 결측치를 제거해줌
merged_data.drop_duplicates(['CUST_ID'], inplace = True)#w중복값 제거

merged_data

merged_data.to_csv('merged_data.csv', encoding = 'utf-8')#utf-8방식 csv파일 전환

files.download('merged_data.csv')#구글 코랩 내장 다운로드 함수